# -*- coding: utf-8 -*-
"""project3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17tApJ7a1ZouaEkpKErtwA9r8bjMlnsY7
"""

import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense
from tensorflow.keras.utils import plot_model
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.optimizers import RMSprop

import os

def list_files(startpath):
    num_files = 0
    for root, dirs, files in os.walk(startpath):
        level = root.replace(startpath, '').count(os.sep)
        indent = ' ' * 2 * (level)
        num_files += len(files)
        print('{}{}/ {}'.format(indent, os.path.basename(root), (str(len(files)) + ' images' if len(files) > 0 else '')))
    return num_files

startpath = 'C:/Users/ASUS/Downloads/TUGASKU/Dicoding/Lintasarta/Project3/cell_images'
total_files = list_files(startpath)
print(f"Total files: {total_files}")

import os

def read_files(startpath):
    image_files = []
    for dirname, dirnames, filenames in os.walk(startpath):
        for filename in filenames:
            image_files.append(os.path.join(dirname, filename))
    return image_files

startpath = 'C:/Users/ASUS/Downloads/TUGASKU/Dicoding/Lintasarta/Project3/cell_images'
image_files = read_files(startpath)
print("List of image files:")
for file in image_files:
    print(file)

import os

# Path pada sistem operasi Windows
path_parasitized_windows = 'C:/Users/ASUS/Downloads/TUGASKU/Dicoding/Lintasarta/Project3/cell_images/Parasitized/Thumbs.db'
path_uninfected_windows = 'C:/Users/ASUS/Downloads/TUGASKU/Dicoding/Lintasarta/Project3/cell_images/Uninfected/Thumbs.db'
path_parasitized_windows_cell = 'C:/Users/ASUS/Downloads/TUGASKU/Dicoding/Lintasarta/Project3/cell_images/cell_images/Parasitized/Thumbs.db'
path_uninfected_windows_cell = 'C:/Users/ASUS/Downloads/TUGASKU/Dicoding/Lintasarta/Project3/cell_images/cell_images/Uninfected/Thumbs.db'

# Hapus file Thumbs.db dari setiap lokasi
os.remove(path_parasitized_windows)
os.remove(path_uninfected_windows)
os.remove(path_parasitized_windows_cell)
os.remove(path_uninfected_windows_cell)

BASE_DIR = 'C:/Users/ASUS/Downloads/TUGASKU/Dicoding/Lintasarta/Project3/cell_images/'

import random

# Definisikan path ke direktori
BASE_DIR = 'C:/Users/ASUS/Downloads/TUGASKU/Dicoding/Lintasarta/Project3/cell_images/'

# Kumpulkan path lengkap dari semua file gambar dalam setiap folder dalam direktori
image_files = []
for root, dirs, files in os.walk(BASE_DIR):
    for file in files:
        if file.endswith('.png'):
            image_files.append(os.path.join(root, file))

# Pilih secara acak path dari daftar path gambar
random_image_path = random.choice(image_files)

# Baca dan tampilkan gambar
img = mpimg.imread(random_image_path)
plt.imshow(img)
plt.axis('off')  # Hilangkan sumbu x dan y
plt.show()

import PIL.Image

full_dirs = read_files(BASE_DIR + "cell_images")
image_sizes = []
for file in full_dirs:
  image = PIL.Image.open(file)
  width, height = image.size
  image_sizes.append(f'{width}x{height}')

unique_sizes = set(image_sizes)

print(f'Size all images: {len(image_sizes)}')
print(f'Size unique images: {len(unique_sizes)}')
print(f'First 10 unique images: \n{list(unique_sizes)[:10]}')

datagen = ImageDataGenerator(
  rescale=1./255,
  validation_split=0.2,
  zoom_range=0.2,
  shear_range=0.2,
  rotation_range=0.2
)

training_generator = datagen.flow_from_directory(
  BASE_DIR + "cell_images",
  subset='training',
  target_size=(120,120),
  seed=42,
  batch_size=64,
  interpolation='nearest',
  class_mode='binary',
  classes=['Parasitized','Uninfected']
)

validation_generator = datagen.flow_from_directory(
  BASE_DIR + "cell_images",
  subset='validation',
  target_size=(120,120),
  seed=42,
  batch_size=64,
  interpolation='nearest',
  class_mode='binary',
  classes=['Parasitized','Uninfected']
)

model = Sequential([
    Conv2D(64, (3,3), activation='relu', input_shape=(120, 120, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Dropout(0.6),
    Conv2D(128, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Conv2D(256, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Dropout(0.4),
    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.2),
    Dense(1, activation='sigmoid')
])

model.summary()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if((logs.get('accuracy') > 0.92) and (logs.get('val_accuracy') > 0.92)):
      self.model.stop_training = True
      print("\nThe accuracy of the training set and the validation set has reached > 92%!")
callbacks = myCallback()

LR = 1e-4
model.compile(loss='binary_crossentropy',
              optimizer=RMSprop(learning_rate=LR),
              metrics=['accuracy'])

result = model.fit(
    training_generator,
    validation_data=validation_generator,
    epochs=25,
    steps_per_epoch=150,
    validation_steps=35,
    callbacks=[callbacks],
    verbose=1
)

loss = result.history['loss']
val_loss = result.history['val_loss']
acc = result.history['accuracy']
val_acc = result.history['val_accuracy']

plt.figure(figsize=(15, 5))

plt.subplot(1, 2, 1)
plt.title('Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.plot(loss, label='Training set')
plt.plot(val_loss, label='Validation set', linestyle='--')
plt.legend()
plt.grid(linestyle='--', linewidth=1, alpha=0.5)

plt.subplot(1, 2, 2)
plt.title('Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.plot(acc, label='Training set')
plt.plot(val_acc, label='Validation set', linestyle='--')
plt.legend()
plt.grid(linestyle='--', linewidth=1, alpha=0.5)

plt.show()

import tensorflow as tf

# Konversi model ke format TF-Lite
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Simpan model sebagai file .tflite
with open('model.tflite', 'wb') as f:
    f.write(tflite_model)

print("TF-Lite model telah disimpan sebagai 'model.tflite'")